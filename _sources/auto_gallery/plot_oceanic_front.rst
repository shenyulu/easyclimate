
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_gallery/plot_oceanic_front.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_gallery_plot_oceanic_front.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_gallery_plot_oceanic_front.py:


Oceanic Front
=========================================================================================================

The role of oceanic fronts in the midlatitude air–sea interaction remains unclear.
Here, we defines new indexes to quantify the intensity and location of two basin-scale oceanic frontal
zones in the wintertime North Pacific, i.e. the subtropical and subarctic frontal zones (STFZ, SAFZ).
With these indexes, two typical modes, which are closely related to two large-scale sea surface temperature (SST) anomaly
patterns resembling Pacific Decadal Oscillation (PDO) and North Pacific Gyre Oscillation (NPGO), respectively,
are found in the oceanic front variabilities as well as in their associations with the midlatitude atmospheric
eddy-driven jet. Corresponding to an PDO-like SST anomaly pattern, an enhanced STFZ occurs with a southward
shifted SAFZ, which is associated with enhanced overlying atmospheric front, baroclinicity and transient
eddy vorticity forcing, thus with an intensification of the westerly jet; and vice versa. On the other hand,
corresponding to an NPGO-like SST pattern, an enhanced SAFZ occurs with a northward shifted STFZ,
which is associated with a northward shift of the atmospheric front, baroclinicity, transient eddy
vorticity forcing, and westerly jet; and vice versa. These results suggest that the basin-scale oceanic
frontal zone is a key region for the midlatitude air–sea interaction in which the atmospheric transient
eddy's dynamical forcing is a key player in such an interaction.

.. seealso::

    - Wang, L., Yang, X.-Q., Yang, D., Xie, Q., Fang, J. and Sun, X. (2017), Two typical modes in the variabilities of wintertime North Pacific basin-scale oceanic fronts and associated atmospheric eddy-driven jet. Atmos. Sci. Lett, 18: 373-380. Website: https://doi.org/10.1002/asl.766
    - Wang, L., Hu, H. & Yang, X. The atmospheric responses to the intensity variability of subtropical front in the wintertime North Pacific. Clim Dyn 52, 5623–5639 (2019). https://doi.org/10.1007/s00382-018-4468-9
    - Huang, Q., Fang, J., Tao, L. et al. Wintertime ocean–atmosphere interaction processes associated with the SST variability in the North Pacific subarctic frontal zone. Clim Dyn 62, 1159–1177 (2024). https://doi.org/10.1007/s00382-023-06958-6
    - Fang, Z., Sun, X., Yang, X.-Q., & Zhu, Z. (2024). Interdecadal variations in the spatial pattern of the Arctic Oscillation Arctic center in wintertime. Geophysical Research Letters, 51, e2024GL111380. https://doi.org/10.1029/2024GL111380
    - 姚瑶. (2018). 北太平洋风暴轴与中纬度海洋锋的相互作用研究（博士学位论文，国防科技大学）. 博士 https://link.cnki.net/doi/10.27052/d.cnki.gzjgu.2018.000410.

Before proceeding with all the steps, first import some necessary libraries and packages

.. GENERATED FROM PYTHON SOURCE LINES 31-38

.. code-block:: Python

    import numpy as np
    import easyclimate as ecl
    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
    import matplotlib.pyplot as plt
    import matplotlib.patches as patches








.. GENERATED FROM PYTHON SOURCE LINES 39-43

We sets up a cartographic projection (Plate Carrée) and creates a base map to visualize the study area.
It restricts the spatial extent to the North Pacific (120°E–240°E, 10°N–60°N) and overlays grid lines with labeled coordinates.
Rectangular patches are added to demarcate the Subtropical Frontal Zone (STFZ, 145°E–215°E, 24°N–32°N) and Subarctic
Frontal Zone (SAFZ, 145°E–215°E, 36°N–44°N), with text labels for clarity. This establishes the geographical context for subsequent frontal zone analyses.

.. GENERATED FROM PYTHON SOURCE LINES 43-66

.. code-block:: Python

    proj_trans = ccrs.PlateCarree()
    fig, ax = plt.subplots(subplot_kw={'projection': ccrs.PlateCarree(central_longitude = 110)})

    ax.stock_img()
    ax.set_extent([120, 240, 10, 60], crs = proj_trans)

    # Grid line
    gl = ax.gridlines(draw_labels=True, color="grey",alpha = 0.5, linestyle="--")
    gl.top_labels = False
    gl.right_labels = False
    gl.left_labels = True
    gl.bottom_labels = True

    # STFZ
    rect1 = patches.Rectangle((145, 24), 70, 8, ec = "r", fc = "none", lw = 2, transform = proj_trans)
    ax.add_patch(rect1)
    ax.text(180 + 0, 28 + 0,'STFZ', size = 14, c = 'r', transform = proj_trans, horizontalalignment='center', verticalalignment='center')

    # SAFZ
    rect2 = patches.Rectangle((145, 36), 70, 8, ec = "r", fc = "none", lw = 2, transform = proj_trans)
    ax.add_patch(rect2)
    ax.text(180 + 0, 40 + 0,'SAFZ', size = 14, c = 'r', transform = proj_trans, horizontalalignment='center', verticalalignment='center')




.. image-sg:: /auto_gallery/images/sphx_glr_plot_oceanic_front_001.png
   :alt: plot oceanic front
   :srcset: /auto_gallery/images/sphx_glr_plot_oceanic_front_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(180, 40, 'SAFZ')



.. GENERATED FROM PYTHON SOURCE LINES 67-70

Here, we import the Optimum Interpolation Sea Surface Temperature (OISST) tutorial dataset using easyclimate,
extracting the sst variable. The dataset is printed to display its structure (dimensions, coordinates, and metadata),
ensuring the input data is correctly loaded for further processing.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: Python

    sst_data = ecl.open_tutorial_dataset('sst_mnmean_oisst').sst
    sst_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in notebooks */

    :root {
      --xr-font-color0: var(
        --jp-content-font-color0,
        var(--pst-color-text-base rgba(0, 0, 0, 1))
      );
      --xr-font-color2: var(
        --jp-content-font-color2,
        var(--pst-color-text-base, rgba(0, 0, 0, 0.54))
      );
      --xr-font-color3: var(
        --jp-content-font-color3,
        var(--pst-color-text-base, rgba(0, 0, 0, 0.38))
      );
      --xr-border-color: var(
        --jp-border-color2,
        hsl(from var(--pst-color-on-background, white) h s calc(l - 10))
      );
      --xr-disabled-color: var(
        --jp-layout-color3,
        hsl(from var(--pst-color-on-background, white) h s calc(l - 40))
      );
      --xr-background-color: var(
        --jp-layout-color0,
        var(--pst-color-on-background, white)
      );
      --xr-background-color-row-even: var(
        --jp-layout-color1,
        hsl(from var(--pst-color-on-background, white) h s calc(l - 5))
      );
      --xr-background-color-row-odd: var(
        --jp-layout-color2,
        hsl(from var(--pst-color-on-background, white) h s calc(l - 15))
      );
    }

    html[theme="dark"],
    html[data-theme="dark"],
    body[data-theme="dark"],
    body.vscode-dark {
      --xr-font-color0: var(
        --jp-content-font-color0,
        var(--pst-color-text-base, rgba(255, 255, 255, 1))
      );
      --xr-font-color2: var(
        --jp-content-font-color2,
        var(--pst-color-text-base, rgba(255, 255, 255, 0.54))
      );
      --xr-font-color3: var(
        --jp-content-font-color3,
        var(--pst-color-text-base, rgba(255, 255, 255, 0.38))
      );
      --xr-border-color: var(
        --jp-border-color2,
        hsl(from var(--pst-color-on-background, #111111) h s calc(l + 10))
      );
      --xr-disabled-color: var(
        --jp-layout-color3,
        hsl(from var(--pst-color-on-background, #111111) h s calc(l + 40))
      );
      --xr-background-color: var(
        --jp-layout-color0,
        var(--pst-color-on-background, #111111)
      );
      --xr-background-color-row-even: var(
        --jp-layout-color1,
        hsl(from var(--pst-color-on-background, #111111) h s calc(l + 5))
      );
      --xr-background-color-row-odd: var(
        --jp-layout-color2,
        hsl(from var(--pst-color-on-background, #111111) h s calc(l + 15))
      );
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
      line-height: 1.6;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-obj-name,
    .xr-group-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-group-name::before {
      content: "📁";
      padding-right: 0.3em;
    }

    .xr-group-name,
    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 0 20px 0 20px;
      margin-block-start: 0;
      margin-block-end: 0;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: inline-block;
      opacity: 0;
      height: 0;
      margin: 0;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
      border: 2px solid transparent !important;
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:focus + label {
      border: 2px solid var(--xr-font-color0) !important;
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: "►";
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: "▼";
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-top: 4px;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-group-box {
      display: inline-grid;
      grid-template-columns: 0px 20px auto;
      width: 100%;
    }

    .xr-group-box-vline {
      grid-column-start: 1;
      border-right: 0.2em solid;
      border-color: var(--xr-border-color);
      width: 0px;
    }

    .xr-group-box-hline {
      grid-column-start: 2;
      grid-row-start: 1;
      height: 1em;
      width: 20px;
      border-bottom: 0.2em solid;
      border-color: var(--xr-border-color);
    }

    .xr-group-box-contents {
      grid-column-start: 3;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: "(";
    }

    .xr-dim-list:after {
      content: ")";
    }

    .xr-dim-list li:not(:last-child):after {
      content: ",";
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      border-color: var(--xr-background-color-row-odd);
      margin-bottom: 0;
      padding-top: 2px;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
      border-color: var(--xr-background-color-row-even);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      border-top: 2px dotted var(--xr-background-color);
      padding-bottom: 20px !important;
      padding-top: 10px !important;
    }

    .xr-var-attrs-in + label,
    .xr-var-data-in + label,
    .xr-index-data-in + label {
      padding: 0 1px;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-data > pre,
    .xr-index-data > pre,
    .xr-var-data > table > tbody > tr {
      background-color: transparent !important;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }

    .xr-var-attrs-in:checked + label > .xr-icon-file-text2,
    .xr-var-data-in:checked + label > .xr-icon-database,
    .xr-index-data-in:checked + label > .xr-icon-database {
      color: var(--xr-font-color0);
      filter: drop-shadow(1px 1px 5px var(--xr-font-color2));
      stroke-width: 0.8px;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;sst&#x27; (time: 494, lat: 180, lon: 360)&gt; Size: 128MB
    [32011200 values with dtype=float32]
    Coordinates:
      * time     (time) datetime64[ns] 4kB 1981-12-01 1982-01-01 ... 2023-01-01
      * lat      (lat) float32 720B -89.5 -88.5 -87.5 -86.5 ... 86.5 87.5 88.5 89.5
      * lon      (lon) float32 1kB 0.5 1.5 2.5 3.5 4.5 ... 356.5 357.5 358.5 359.5</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-obj-name'>&#x27;sst&#x27;</div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 494</li><li><span class='xr-has-index'>lat</span>: 180</li><li><span class='xr-has-index'>lon</span>: 360</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-7b1e47ee-ec39-4fee-a224-bcd146edb939' class='xr-array-in' type='checkbox' checked><label for='section-7b1e47ee-ec39-4fee-a224-bcd146edb939' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>...</span></div><div class='xr-array-data'><pre>[32011200 values with dtype=float32]</pre></div></div></li><li class='xr-section-item'><input id='section-36183571-2530-4e70-8e3c-105d7b7bc82c' class='xr-section-summary-in' type='checkbox'  checked><label for='section-36183571-2530-4e70-8e3c-105d7b7bc82c' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>1981-12-01 ... 2023-01-01</div><input id='attrs-1df187be-f6ac-4443-ba89-0d9fcd0d5a3e' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-1df187be-f6ac-4443-ba89-0d9fcd0d5a3e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8e72ee66-2a32-4ca9-a628-773bbb4e92e2' class='xr-var-data-in' type='checkbox'><label for='data-8e72ee66-2a32-4ca9-a628-773bbb4e92e2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>Time</dd><dt><span>actual_range :</span></dt><dd>[66443. 81449.]</dd><dt><span>delta_t :</span></dt><dd>0000-01-00 00:00:00</dd><dt><span>avg_period :</span></dt><dd>0000-01-00 00:00:00</dd><dt><span>prev_avg_period :</span></dt><dd>0000-00-07 00:00:00</dd><dt><span>standard_name :</span></dt><dd>time</dd><dt><span>axis :</span></dt><dd>T</dd><dt><span>bounds :</span></dt><dd>time_bnds</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;1981-12-01T00:00:00.000000000&#x27;, &#x27;1982-01-01T00:00:00.000000000&#x27;,
           &#x27;1982-02-01T00:00:00.000000000&#x27;, ..., &#x27;2022-11-01T00:00:00.000000000&#x27;,
           &#x27;2022-12-01T00:00:00.000000000&#x27;, &#x27;2023-01-01T00:00:00.000000000&#x27;],
          shape=(494,), dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>lat</span></div><div class='xr-var-dims'>(lat)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-89.5 -88.5 -87.5 ... 88.5 89.5</div><input id='attrs-751e8997-df02-4f5b-b409-aa4e2cdff896' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-751e8997-df02-4f5b-b409-aa4e2cdff896' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-89184d89-3c67-4d78-810e-4124e7b2f064' class='xr-var-data-in' type='checkbox'><label for='data-89184d89-3c67-4d78-810e-4124e7b2f064' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_north</dd><dt><span>long_name :</span></dt><dd>Latitude</dd><dt><span>actual_range :</span></dt><dd>[ 89.5 -89.5]</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>axis :</span></dt><dd>Y</dd><dt><span>coordinate_defines :</span></dt><dd>center</dd></dl></div><div class='xr-var-data'><pre>array([-89.5, -88.5, -87.5, -86.5, -85.5, -84.5, -83.5, -82.5, -81.5, -80.5,
           -79.5, -78.5, -77.5, -76.5, -75.5, -74.5, -73.5, -72.5, -71.5, -70.5,
           -69.5, -68.5, -67.5, -66.5, -65.5, -64.5, -63.5, -62.5, -61.5, -60.5,
           -59.5, -58.5, -57.5, -56.5, -55.5, -54.5, -53.5, -52.5, -51.5, -50.5,
           -49.5, -48.5, -47.5, -46.5, -45.5, -44.5, -43.5, -42.5, -41.5, -40.5,
           -39.5, -38.5, -37.5, -36.5, -35.5, -34.5, -33.5, -32.5, -31.5, -30.5,
           -29.5, -28.5, -27.5, -26.5, -25.5, -24.5, -23.5, -22.5, -21.5, -20.5,
           -19.5, -18.5, -17.5, -16.5, -15.5, -14.5, -13.5, -12.5, -11.5, -10.5,
            -9.5,  -8.5,  -7.5,  -6.5,  -5.5,  -4.5,  -3.5,  -2.5,  -1.5,  -0.5,
             0.5,   1.5,   2.5,   3.5,   4.5,   5.5,   6.5,   7.5,   8.5,   9.5,
            10.5,  11.5,  12.5,  13.5,  14.5,  15.5,  16.5,  17.5,  18.5,  19.5,
            20.5,  21.5,  22.5,  23.5,  24.5,  25.5,  26.5,  27.5,  28.5,  29.5,
            30.5,  31.5,  32.5,  33.5,  34.5,  35.5,  36.5,  37.5,  38.5,  39.5,
            40.5,  41.5,  42.5,  43.5,  44.5,  45.5,  46.5,  47.5,  48.5,  49.5,
            50.5,  51.5,  52.5,  53.5,  54.5,  55.5,  56.5,  57.5,  58.5,  59.5,
            60.5,  61.5,  62.5,  63.5,  64.5,  65.5,  66.5,  67.5,  68.5,  69.5,
            70.5,  71.5,  72.5,  73.5,  74.5,  75.5,  76.5,  77.5,  78.5,  79.5,
            80.5,  81.5,  82.5,  83.5,  84.5,  85.5,  86.5,  87.5,  88.5,  89.5],
          dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>lon</span></div><div class='xr-var-dims'>(lon)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.5 1.5 2.5 ... 357.5 358.5 359.5</div><input id='attrs-d30a6a75-0c91-4717-a892-5a62e21d97a9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-d30a6a75-0c91-4717-a892-5a62e21d97a9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6c12a620-c245-47de-a1c1-05464066bf0f' class='xr-var-data-in' type='checkbox'><label for='data-6c12a620-c245-47de-a1c1-05464066bf0f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_east</dd><dt><span>long_name :</span></dt><dd>Longitude</dd><dt><span>actual_range :</span></dt><dd>[  0.5 359.5]</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>axis :</span></dt><dd>X</dd><dt><span>coordinate_defines :</span></dt><dd>center</dd></dl></div><div class='xr-var-data'><pre>array([  0.5,   1.5,   2.5, ..., 357.5, 358.5, 359.5],
          shape=(360,), dtype=float32)</pre></div></li></ul></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 74-79

This block calculates the winter (December–January–February, DJF) seasonal mean SST from the monthly data using :py:func:`easyclimate.calc_seasonal_mean <easyclimate.calc_seasonal_mean>`.
It then derives the long-term (time-mean) winter SST climatology over the extended North Pacific (110°E–250°E, 0°N–80°N).
Additionally, the meridional gradient of SST (:math:`\mathrm{d}SST/\mathrm{d}y`) is computed using :py:func:`easyclimate.calc_lat_gradient <easyclimate.calc_lat_gradient>`
(with a sign inversion to align with standard gradient conventions) and averaged over time to obtain its climatological mean.
These variables are critical for quantifying oceanic frontal intensity (via :math:`\mathrm{d}SST/\mathrm{d}y`) and spatial patterns.

.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: Python

    sst_data_DJF_mean = ecl.calc_seasonal_mean(sst_data, extract_season="DJF")
    sst_data_DJF_longmean = sst_data_DJF_mean.mean(dim = "time").sel(lon = slice(110, 250), lat = slice(0, 80))

    dtdy_data_DJF_mean = ecl.calc_lat_gradient(sst_data_DJF_mean).sel(lon = slice(110, 250), lat = slice(0, 80)) *(-1)
    dtdy_data_DJF_longmean = dtdy_data_DJF_mean.mean(dim = "time")








.. GENERATED FROM PYTHON SOURCE LINES 86-92

Next, The blocks visualize the long-term winter SST and its meridional gradient. Using a ``Plate Carrée`` projection centered at 180°E,
it overlays black SST contours (4–30℃, 4℃ intervals) to show surface temperature structure.
The :math:`\mathrm{d}SST/\mathrm{d}y` field is plotted as a filled contour (range: :math:`-1.8 \times 10^{-5} \sim 1.8 \times 10^{-5}` ℃/m) to
highlight regions of strong oceanic fronts (positive :math:`\mathrm{d}SST/\mathrm{d}y` indicates northward SST increase).
Land areas are shaded to emphasize marine features. A horizontal colorbar is added for :math:`\mathrm{d}SST/\mathrm{d}y`,
with scientific notation formatting. This figure contextualizes frontal zones within the broader SST climatology.

.. GENERATED FROM PYTHON SOURCE LINES 92-122

.. code-block:: Python

    proj_trans = ccrs.PlateCarree()
    fig, ax = ecl.plot.quick_draw_spatial_basemap(central_longitude=180)

    ax.set_extent([120, 240, 10, 60], crs = proj_trans)
    ax.add_feature(cfeature.LAND, facecolor = '#DDDDDD', zorder = 2)

    # SST
    fig1 = sst_data_DJF_longmean.plot.contour(
        colors="k",
        linewidths = 0.5,
        levels=np.arange(4, 30, 4),
        transform = ccrs.PlateCarree(),
        zorder = 1,
    )
    ax.clabel(fig1, inline = True, fontsize = 10, colors = "k")

    # dSST/dy
    fig2 = dtdy_data_DJF_longmean.plot.contourf(
        levels=np.linspace(-1.8*1e-5, 1.8*1e-5, 21),
        transform = ccrs.PlateCarree(),
        add_colorbar=False,
        zorder = 0,
    )
    cb1 = fig.colorbar(fig2, ax = ax, orientation = 'horizontal', pad = 0.15, extendrect = True)
    cb1.set_label('')
    cb1.formatter.set_powerlimits((0, 0))
    cb1.formatter.set_useMathText(True)

    ax.set_title("DJF ${\\mathrm{d}SST}/{\\mathrm{d}y}$ and SST")




.. image-sg:: /auto_gallery/images/sphx_glr_plot_oceanic_front_002.png
   :alt: DJF ${\mathrm{d}SST}/{\mathrm{d}y}$ and SST
   :srcset: /auto_gallery/images/sphx_glr_plot_oceanic_front_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'DJF ${\\mathrm{d}SST}/{\\mathrm{d}y}$ and SST')



.. GENERATED FROM PYTHON SOURCE LINES 123-134

This section uses ``easyclimate`` utility functions to quantify frontal zone variability:

- :py:func:`easyclimate.field.ocean.oceanic_front.calc_intensity_STFZ <easyclimate.field.ocean.oceanic_front.calc_intensity_STFZ>`: Computes the area-averaged :math:`\mathrm{d}SST/\mathrm{d}y` within predefined STFZ regions to represent frontal intensity.
- :py:func:`easyclimate.field.ocean.oceanic_front.calc_intensity_SAFZ <easyclimate.field.ocean.oceanic_front.calc_intensity_SAFZ>`: Computes the area-averaged :math:`\mathrm{d}SST/\mathrm{d}y` within predefined SAFZ regions to represent frontal intensity.
- :py:func:`easyclimate.field.ocean.oceanic_front.calc_location_STFZ <easyclimate.field.ocean.oceanic_front.calc_location_STFZ>`: Determines the latitude of maximum :math:`\mathrm{d}SST/\mathrm{d}y` within each zone to track STFZ position.
- :py:func:`easyclimate.field.ocean.oceanic_front.calc_location_SAFZ <easyclimate.field.ocean.oceanic_front.calc_location_SAFZ>`: Determines the latitude of maximum :math:`\mathrm{d}SST/\mathrm{d}y` within each zone to track SAFZ position.
- :py:func:`easyclimate.field.ocean.oceanic_front.calc_location_line_STFZ <easyclimate.field.ocean.oceanic_front.calc_location_line_STFZ>`: Generates longitude-dependent positional lines (latitude vs. longitude) for STFZ, capturing their zonal structure.
- :py:func:`easyclimate.field.ocean.oceanic_front.calc_location_SAFZ <easyclimate.field.ocean.oceanic_front.calc_location_SAFZ>`: Generates longitude-dependent positional lines (latitude vs. longitude) for SAFZ, capturing their zonal structure.

Long-term means of these positional lines are computed to establish climatological frontal boundaries.


.. GENERATED FROM PYTHON SOURCE LINES 134-145

.. code-block:: Python


    intensity_STFZ_DJF = ecl.field.ocean.calc_intensity_STFZ(dtdy_data_DJF_mean)
    intensity_SAFZ_DJF = ecl.field.ocean.calc_intensity_SAFZ(dtdy_data_DJF_mean)
    location_STFZ_DJF = ecl.field.ocean.calc_location_STFZ(dtdy_data_DJF_mean)
    location_SAFZ_DJF = ecl.field.ocean.calc_location_SAFZ(dtdy_data_DJF_mean)

    line_STFZ_DJF = ecl.field.ocean.calc_location_line_STFZ(dtdy_data_DJF_mean)
    line_SAFZ_DJF = ecl.field.ocean.calc_location_line_SAFZ(dtdy_data_DJF_mean)
    line_STFZ_DJF_longmean = line_STFZ_DJF.mean(dim = "time")
    line_SAFZ_DJF_longmean = line_SAFZ_DJF.mean(dim = "time")








.. GENERATED FROM PYTHON SOURCE LINES 146-153

This code creates a 2×2 subplot grid to visualize frontal zone dynamics:

- Top row: Time series of STFZ and SAFZ intensity (multiplied by :math:`10^5` for readability), with y-labels indicating units (:math:`- 10^{-5}` ℃/m).
- Bottom row: Time series of STFZ and SAFZ meridional location (latitude, °N), with latitude-formatted axes.

Subplots are labeled (a)–(d) for reference, and x-axis labels are removed for consistency. This figure highlights interannual variations in frontal strength and position, key for identifying modes of variability (e.g., PDO/NPGO associations).


.. GENERATED FROM PYTHON SOURCE LINES 153-212

.. code-block:: Python

    titleleft_fontsize = 22
    titleright_fontsize = 20
    titleleft_pad = 10
    decimal_places = 2

    fig, ax = plt.subplots(2, 2, figsize = (10.5, 6))
    fig.subplots_adjust(hspace = 0.5)

    # --------------------------------------------------
    # STFZ Intensity
    axi = ax[0, 0]

    (intensity_STFZ_DJF *1e5).plot(ax = axi)

    axi.set_ylabel('$\\times 10^{-5}$')

    axi.set_title("ITS STFZ", loc = 'right')
    axi.set_title("")
    axi.set_title("(a)", loc = 'left')

    # --------------------------------------------------
    # SAFZ Intensity
    axi = ax[0, 1]

    (intensity_SAFZ_DJF *1e5).plot(ax = axi)
    axi.set_ylabel('$\\times 10^{-5}$')

    axi.set_title("ITS SAFZ", loc = 'right')
    axi.set_title("")
    axi.set_title("(b)", loc = 'left')

    # --------------------------------------------------
    # STFZ Location
    axi = ax[1, 0]

    (location_STFZ_DJF *1).plot(ax = axi)

    axi.set_title("LCT STFZ", loc = 'right')
    axi.set_title("")
    axi.set_title("(c)", loc = 'left')

    # --------------------------------------------------
    # SAFZ Location
    axi = ax[1, 1]

    line1, = (location_SAFZ_DJF *1).plot(ax = axi)

    axi.set_title("LCT SAFZ", loc = 'right')
    axi.set_title("")
    axi.set_title("(d)", loc = 'left')


    for axi in ax.flat:
        axi.set_xlabel('')

    for axi in [ax[1, 0], ax[1, 1]]:
        ecl.plot.set_lat_format_axis(ax = axi)





.. image-sg:: /auto_gallery/images/sphx_glr_plot_oceanic_front_003.png
   :alt: (a), ITS STFZ, (b), ITS SAFZ, (c), LCT STFZ, (d), LCT SAFZ
   :srcset: /auto_gallery/images/sphx_glr_plot_oceanic_front_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 213-218

Finally, we revisits the spatial plot of winter :math:`\mathrm{d}SST/\mathrm{d}y` but adds the long-term mean positional lines of STFZ and SAFZ (black lines).
These lines, derived from the zonal average of ``line_STFZ_DJF_longmean`` and ``line_SAFZ_DJF_longmean``,
visually validate the frontal zone definitions by aligning with peak :math:`\mathrm{d}SST/\mathrm{d}y` regions.
The figure confirms that the positional lines coincide with the core of the oceanic fronts,
ensuring the indices accurately represent frontal structure.

.. GENERATED FROM PYTHON SOURCE LINES 218-241

.. code-block:: Python

    proj_trans = ccrs.PlateCarree()
    fig, ax = ecl.plot.quick_draw_spatial_basemap(central_longitude=180)

    ax.set_extent([120, 240, 10, 60], crs = proj_trans)
    ax.add_feature(cfeature.LAND, facecolor = '#DDDDDD', zorder = 2)

    # Line
    line_STFZ_DJF_longmean.plot(ax = ax, color = 'black', zorder = 3, transform = proj_trans)
    line_SAFZ_DJF_longmean.plot(ax = ax, color = 'black', zorder = 3, transform = proj_trans)

    # dSST/dy
    fig2 = dtdy_data_DJF_longmean.plot.contourf(
        levels=np.linspace(-1.8*1e-5, 1.8*1e-5, 21),
        transform = ccrs.PlateCarree(),
        add_colorbar=False,
        zorder = 0,
    )
    cb1 = fig.colorbar(fig2, ax = ax, orientation = 'horizontal', pad = 0.15, extendrect = True)
    cb1.set_label('')
    cb1.formatter.set_powerlimits((0, 0))
    cb1.formatter.set_useMathText(True)

    ax.set_title("DJF ${\\mathrm{d}SST}/{\\mathrm{d}y}$ and Line")



.. image-sg:: /auto_gallery/images/sphx_glr_plot_oceanic_front_004.png
   :alt: DJF ${\mathrm{d}SST}/{\mathrm{d}y}$ and Line
   :srcset: /auto_gallery/images/sphx_glr_plot_oceanic_front_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'DJF ${\\mathrm{d}SST}/{\\mathrm{d}y}$ and Line')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 7.517 seconds)


.. _sphx_glr_download_auto_gallery_plot_oceanic_front.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oceanic_front.ipynb <plot_oceanic_front.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oceanic_front.py <plot_oceanic_front.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_oceanic_front.zip <plot_oceanic_front.zip>`
